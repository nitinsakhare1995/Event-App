//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 3 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `Other`.
    static let other = _R.storyboard.other()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Other", bundle: ...)`
    static func other(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.other)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 3 colors.
  struct color {
    /// Color `DarkGreen`.
    static let darkGreen = Rswift.ColorResource(bundle: R.hostingBundle, name: "DarkGreen")
    /// Color `LightGreen`.
    static let lightGreen = Rswift.ColorResource(bundle: R.hostingBundle, name: "LightGreen")
    /// Color `VCBackground`.
    static let vcBackground = Rswift.ColorResource(bundle: R.hostingBundle, name: "VCBackground")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "DarkGreen", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func darkGreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.darkGreen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "LightGreen", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func lightGreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.lightGreen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "VCBackground", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func vcBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.vcBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "DarkGreen", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func darkGreen(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.darkGreen.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "LightGreen", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func lightGreen(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.lightGreen.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "VCBackground", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func vcBackground(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.vcBackground.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 4 files.
  struct file {
    /// Resource file `Gordita Bold.otf`.
    static let gorditaBoldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Gordita Bold", pathExtension: "otf")
    /// Resource file `Gordita Light.otf`.
    static let gorditaLightOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Gordita Light", pathExtension: "otf")
    /// Resource file `Gordita Medium.otf`.
    static let gorditaMediumOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Gordita Medium", pathExtension: "otf")
    /// Resource file `Gordita Regular.otf`.
    static let gorditaRegularOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Gordita Regular", pathExtension: "otf")

    /// `bundle.url(forResource: "Gordita Bold", withExtension: "otf")`
    static func gorditaBoldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gorditaBoldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Gordita Light", withExtension: "otf")`
    static func gorditaLightOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gorditaLightOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Gordita Medium", withExtension: "otf")`
    static func gorditaMediumOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gorditaMediumOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Gordita Regular", withExtension: "otf")`
    static func gorditaRegularOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gorditaRegularOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 4 fonts.
  struct font: Rswift.Validatable {
    /// Font `Gordita-Bold`.
    static let gorditaBold = Rswift.FontResource(fontName: "Gordita-Bold")
    /// Font `Gordita-Light`.
    static let gorditaLight = Rswift.FontResource(fontName: "Gordita-Light")
    /// Font `Gordita-Medium`.
    static let gorditaMedium = Rswift.FontResource(fontName: "Gordita-Medium")
    /// Font `Gordita-Regular`.
    static let gorditaRegular = Rswift.FontResource(fontName: "Gordita-Regular")

    /// `UIFont(name: "Gordita-Bold", size: ...)`
    static func gorditaBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gorditaBold, size: size)
    }

    /// `UIFont(name: "Gordita-Light", size: ...)`
    static func gorditaLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gorditaLight, size: size)
    }

    /// `UIFont(name: "Gordita-Medium", size: ...)`
    static func gorditaMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gorditaMedium, size: size)
    }

    /// `UIFont(name: "Gordita-Regular", size: ...)`
    static func gorditaRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gorditaRegular, size: size)
    }

    static func validate() throws {
      if R.font.gorditaBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Gordita-Bold' could not be loaded, is 'Gordita Bold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.gorditaLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Gordita-Light' could not be loaded, is 'Gordita Light.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.gorditaMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Gordita-Medium' could not be loaded, is 'Gordita Medium.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.gorditaRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Gordita-Regular' could not be loaded, is 'Gordita Regular.otf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 11 images.
  struct image {
    /// Image `Angela Needle`.
    static let angelaNeedle = Rswift.ImageResource(bundle: R.hostingBundle, name: "Angela Needle")
    /// Image `Arrow`.
    static let arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "Arrow")
    /// Image `agenda`.
    static let agenda = Rswift.ImageResource(bundle: R.hostingBundle, name: "agenda")
    /// Image `blogs`.
    static let blogs = Rswift.ImageResource(bundle: R.hostingBundle, name: "blogs")
    /// Image `drawer`.
    static let drawer = Rswift.ImageResource(bundle: R.hostingBundle, name: "drawer")
    /// Image `image 7`.
    static let image7 = Rswift.ImageResource(bundle: R.hostingBundle, name: "image 7")
    /// Image `maps`.
    static let maps = Rswift.ImageResource(bundle: R.hostingBundle, name: "maps")
    /// Image `notification`.
    static let notification = Rswift.ImageResource(bundle: R.hostingBundle, name: "notification")
    /// Image `speakers`.
    static let speakers = Rswift.ImageResource(bundle: R.hostingBundle, name: "speakers")
    /// Image `sponsors`.
    static let sponsors = Rswift.ImageResource(bundle: R.hostingBundle, name: "sponsors")
    /// Image `videos`.
    static let videos = Rswift.ImageResource(bundle: R.hostingBundle, name: "videos")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Angela Needle", bundle: ..., traitCollection: ...)`
    static func angelaNeedle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.angelaNeedle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Arrow", bundle: ..., traitCollection: ...)`
    static func arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "agenda", bundle: ..., traitCollection: ...)`
    static func agenda(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.agenda, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "blogs", bundle: ..., traitCollection: ...)`
    static func blogs(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.blogs, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "drawer", bundle: ..., traitCollection: ...)`
    static func drawer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.drawer, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "image 7", bundle: ..., traitCollection: ...)`
    static func image7(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.image7, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "maps", bundle: ..., traitCollection: ...)`
    static func maps(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.maps, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "notification", bundle: ..., traitCollection: ...)`
    static func notification(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notification, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "speakers", bundle: ..., traitCollection: ...)`
    static func speakers(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.speakers, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sponsors", bundle: ..., traitCollection: ...)`
    static func sponsors(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sponsors, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "videos", bundle: ..., traitCollection: ...)`
    static func videos(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.videos, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"
            static let uiSceneStoryboardFile = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneStoryboardFile") ?? "Main"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 3 nibs.
  struct nib {
    /// Nib `HomeSpeakersCell`.
    static let homeSpeakersCell = _R.nib._HomeSpeakersCell()
    /// Nib `HomeVideosCell`.
    static let homeVideosCell = _R.nib._HomeVideosCell()
    /// Nib `NotificationsCell`.
    static let notificationsCell = _R.nib._NotificationsCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeSpeakersCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeSpeakersCell) instead")
    static func homeSpeakersCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeSpeakersCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeVideosCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeVideosCell) instead")
    static func homeVideosCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeVideosCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "NotificationsCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.notificationsCell) instead")
    static func notificationsCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.notificationsCell)
    }
    #endif

    static func homeSpeakersCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeSpeakersCell? {
      return R.nib.homeSpeakersCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeSpeakersCell
    }

    static func homeVideosCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeVideosCell? {
      return R.nib.homeVideosCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeVideosCell
    }

    static func notificationsCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NotificationsCell? {
      return R.nib.notificationsCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NotificationsCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 3 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `HomeSpeakersCell`.
    static let homeSpeakersCell: Rswift.ReuseIdentifier<HomeSpeakersCell> = Rswift.ReuseIdentifier(identifier: "HomeSpeakersCell")
    /// Reuse identifier `HomeVideosCell`.
    static let homeVideosCell: Rswift.ReuseIdentifier<HomeVideosCell> = Rswift.ReuseIdentifier(identifier: "HomeVideosCell")
    /// Reuse identifier `NotificationsCell`.
    static let notificationsCell: Rswift.ReuseIdentifier<NotificationsCell> = Rswift.ReuseIdentifier(identifier: "NotificationsCell")

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _HomeSpeakersCell.validate()
      try _HomeVideosCell.validate()
      try _NotificationsCell.validate()
    }

    struct _HomeSpeakersCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = HomeSpeakersCell

      let bundle = R.hostingBundle
      let identifier = "HomeSpeakersCell"
      let name = "HomeSpeakersCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeSpeakersCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeSpeakersCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Angela Needle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Angela Needle' is used in nib 'HomeSpeakersCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Arrow' is used in nib 'HomeSpeakersCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _HomeVideosCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = HomeVideosCell

      let bundle = R.hostingBundle
      let identifier = "HomeVideosCell"
      let name = "HomeVideosCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeVideosCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeVideosCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "image 7", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'image 7' is used in nib 'HomeVideosCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _NotificationsCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = NotificationsCell

      let bundle = R.hostingBundle
      let identifier = "NotificationsCell"
      let name = "NotificationsCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NotificationsCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NotificationsCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Angela Needle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Angela Needle' is used in nib 'NotificationsCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Arrow' is used in nib 'NotificationsCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try other.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let homeVC = StoryboardViewControllerResource<HomeVC>(identifier: "HomeVC")
      let name = "Main"

      func homeVC(_: Void = ()) -> HomeVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "agenda", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'agenda' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "blogs", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'blogs' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "drawer", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'drawer' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "maps", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'maps' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "notification", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'notification' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "speakers", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'speakers' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "sponsors", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'sponsors' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "videos", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'videos' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "VCBackground", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'VCBackground' is used in storyboard 'Main', but couldn't be loaded.") }
        }
        if _R.storyboard.main().homeVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeVC' could not be loaded from storyboard 'Main' as 'HomeVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct other: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Other"
      let notificationsVC = StoryboardViewControllerResource<NotificationsVC>(identifier: "NotificationsVC")

      func notificationsVC(_: Void = ()) -> NotificationsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: notificationsVC)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "VCBackground", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'VCBackground' is used in storyboard 'Other', but couldn't be loaded.") }
        }
        if _R.storyboard.other().notificationsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'notificationsVC' could not be loaded from storyboard 'Other' as 'NotificationsVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
