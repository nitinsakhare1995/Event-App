//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 5 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `Other`.
    static let other = _R.storyboard.other()
    /// Storyboard `Speakers`.
    static let speakers = _R.storyboard.speakers()
    /// Storyboard `User`.
    static let user = _R.storyboard.user()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Other", bundle: ...)`
    static func other(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.other)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Speakers", bundle: ...)`
    static func speakers(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.speakers)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "User", bundle: ...)`
    static func user(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.user)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 3 colors.
  struct color {
    /// Color `DarkGreen`.
    static let darkGreen = Rswift.ColorResource(bundle: R.hostingBundle, name: "DarkGreen")
    /// Color `LightGreen`.
    static let lightGreen = Rswift.ColorResource(bundle: R.hostingBundle, name: "LightGreen")
    /// Color `VCBackground`.
    static let vcBackground = Rswift.ColorResource(bundle: R.hostingBundle, name: "VCBackground")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "DarkGreen", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func darkGreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.darkGreen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "LightGreen", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func lightGreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.lightGreen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "VCBackground", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func vcBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.vcBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "DarkGreen", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func darkGreen(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.darkGreen.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "LightGreen", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func lightGreen(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.lightGreen.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "VCBackground", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func vcBackground(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.vcBackground.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 4 files.
  struct file {
    /// Resource file `Gordita Bold.otf`.
    static let gorditaBoldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Gordita Bold", pathExtension: "otf")
    /// Resource file `Gordita Light.otf`.
    static let gorditaLightOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Gordita Light", pathExtension: "otf")
    /// Resource file `Gordita Medium.otf`.
    static let gorditaMediumOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Gordita Medium", pathExtension: "otf")
    /// Resource file `Gordita Regular.otf`.
    static let gorditaRegularOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Gordita Regular", pathExtension: "otf")

    /// `bundle.url(forResource: "Gordita Bold", withExtension: "otf")`
    static func gorditaBoldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gorditaBoldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Gordita Light", withExtension: "otf")`
    static func gorditaLightOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gorditaLightOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Gordita Medium", withExtension: "otf")`
    static func gorditaMediumOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gorditaMediumOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Gordita Regular", withExtension: "otf")`
    static func gorditaRegularOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gorditaRegularOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 4 fonts.
  struct font: Rswift.Validatable {
    /// Font `Gordita-Bold`.
    static let gorditaBold = Rswift.FontResource(fontName: "Gordita-Bold")
    /// Font `Gordita-Light`.
    static let gorditaLight = Rswift.FontResource(fontName: "Gordita-Light")
    /// Font `Gordita-Medium`.
    static let gorditaMedium = Rswift.FontResource(fontName: "Gordita-Medium")
    /// Font `Gordita-Regular`.
    static let gorditaRegular = Rswift.FontResource(fontName: "Gordita-Regular")

    /// `UIFont(name: "Gordita-Bold", size: ...)`
    static func gorditaBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gorditaBold, size: size)
    }

    /// `UIFont(name: "Gordita-Light", size: ...)`
    static func gorditaLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gorditaLight, size: size)
    }

    /// `UIFont(name: "Gordita-Medium", size: ...)`
    static func gorditaMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gorditaMedium, size: size)
    }

    /// `UIFont(name: "Gordita-Regular", size: ...)`
    static func gorditaRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gorditaRegular, size: size)
    }

    static func validate() throws {
      if R.font.gorditaBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Gordita-Bold' could not be loaded, is 'Gordita Bold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.gorditaLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Gordita-Light' could not be loaded, is 'Gordita Light.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.gorditaMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Gordita-Medium' could not be loaded, is 'Gordita Medium.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.gorditaRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Gordita-Regular' could not be loaded, is 'Gordita Regular.otf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 32 images.
  struct image {
    /// Image `Angela Needle`.
    static let angelaNeedle = Rswift.ImageResource(bundle: R.hostingBundle, name: "Angela Needle")
    /// Image `ArrowWhite`.
    static let arrowWhite = Rswift.ImageResource(bundle: R.hostingBundle, name: "ArrowWhite")
    /// Image `Arrow`.
    static let arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "Arrow")
    /// Image `Bosch`.
    static let bosch = Rswift.ImageResource(bundle: R.hostingBundle, name: "Bosch")
    /// Image `FB login`.
    static let fbLogin = Rswift.ImageResource(bundle: R.hostingBundle, name: "FB login")
    /// Image `Filter`.
    static let filter = Rswift.ImageResource(bundle: R.hostingBundle, name: "Filter")
    /// Image `Google login`.
    static let googleLogin = Rswift.ImageResource(bundle: R.hostingBundle, name: "Google login")
    /// Image `GreenBG`.
    static let greenBG = Rswift.ImageResource(bundle: R.hostingBundle, name: "GreenBG")
    /// Image `Search Icon`.
    static let searchIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Search Icon")
    /// Image `agenda`.
    static let agenda = Rswift.ImageResource(bundle: R.hostingBundle, name: "agenda")
    /// Image `blogs`.
    static let blogs = Rswift.ImageResource(bundle: R.hostingBundle, name: "blogs")
    /// Image `cancel`.
    static let cancel = Rswift.ImageResource(bundle: R.hostingBundle, name: "cancel")
    /// Image `drawer`.
    static let drawer = Rswift.ImageResource(bundle: R.hostingBundle, name: "drawer")
    /// Image `eventsSide`.
    static let eventsSide = Rswift.ImageResource(bundle: R.hostingBundle, name: "eventsSide")
    /// Image `facebook`.
    static let facebook = Rswift.ImageResource(bundle: R.hostingBundle, name: "facebook")
    /// Image `image 7`.
    static let image7 = Rswift.ImageResource(bundle: R.hostingBundle, name: "image 7")
    /// Image `linkedin`.
    static let linkedin = Rswift.ImageResource(bundle: R.hostingBundle, name: "linkedin")
    /// Image `linkweb`.
    static let linkweb = Rswift.ImageResource(bundle: R.hostingBundle, name: "linkweb")
    /// Image `maps`.
    static let maps = Rswift.ImageResource(bundle: R.hostingBundle, name: "maps")
    /// Image `notification`.
    static let notification = Rswift.ImageResource(bundle: R.hostingBundle, name: "notification")
    /// Image `personSide`.
    static let personSide = Rswift.ImageResource(bundle: R.hostingBundle, name: "personSide")
    /// Image `redirect`.
    static let redirect = Rswift.ImageResource(bundle: R.hostingBundle, name: "redirect")
    /// Image `resourceThumbnail`.
    static let resourceThumbnail = Rswift.ImageResource(bundle: R.hostingBundle, name: "resourceThumbnail")
    /// Image `resourcesSide`.
    static let resourcesSide = Rswift.ImageResource(bundle: R.hostingBundle, name: "resourcesSide")
    /// Image `settingsSide`.
    static let settingsSide = Rswift.ImageResource(bundle: R.hostingBundle, name: "settingsSide")
    /// Image `speakers`.
    static let speakers = Rswift.ImageResource(bundle: R.hostingBundle, name: "speakers")
    /// Image `sponsors`.
    static let sponsors = Rswift.ImageResource(bundle: R.hostingBundle, name: "sponsors")
    /// Image `time`.
    static let time = Rswift.ImageResource(bundle: R.hostingBundle, name: "time")
    /// Image `twitter`.
    static let twitter = Rswift.ImageResource(bundle: R.hostingBundle, name: "twitter")
    /// Image `videos`.
    static let videos = Rswift.ImageResource(bundle: R.hostingBundle, name: "videos")
    /// Image `white_logo`.
    static let white_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "white_logo")
    /// Image `www`.
    static let www = Rswift.ImageResource(bundle: R.hostingBundle, name: "www")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Angela Needle", bundle: ..., traitCollection: ...)`
    static func angelaNeedle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.angelaNeedle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Arrow", bundle: ..., traitCollection: ...)`
    static func arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ArrowWhite", bundle: ..., traitCollection: ...)`
    static func arrowWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowWhite, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Bosch", bundle: ..., traitCollection: ...)`
    static func bosch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bosch, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "FB login", bundle: ..., traitCollection: ...)`
    static func fbLogin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fbLogin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Filter", bundle: ..., traitCollection: ...)`
    static func filter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.filter, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Google login", bundle: ..., traitCollection: ...)`
    static func googleLogin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.googleLogin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GreenBG", bundle: ..., traitCollection: ...)`
    static func greenBG(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.greenBG, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Search Icon", bundle: ..., traitCollection: ...)`
    static func searchIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.searchIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "agenda", bundle: ..., traitCollection: ...)`
    static func agenda(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.agenda, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "blogs", bundle: ..., traitCollection: ...)`
    static func blogs(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.blogs, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cancel", bundle: ..., traitCollection: ...)`
    static func cancel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cancel, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "drawer", bundle: ..., traitCollection: ...)`
    static func drawer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.drawer, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eventsSide", bundle: ..., traitCollection: ...)`
    static func eventsSide(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eventsSide, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "facebook", bundle: ..., traitCollection: ...)`
    static func facebook(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.facebook, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "image 7", bundle: ..., traitCollection: ...)`
    static func image7(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.image7, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "linkedin", bundle: ..., traitCollection: ...)`
    static func linkedin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.linkedin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "linkweb", bundle: ..., traitCollection: ...)`
    static func linkweb(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.linkweb, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "maps", bundle: ..., traitCollection: ...)`
    static func maps(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.maps, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "notification", bundle: ..., traitCollection: ...)`
    static func notification(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notification, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "personSide", bundle: ..., traitCollection: ...)`
    static func personSide(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.personSide, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "redirect", bundle: ..., traitCollection: ...)`
    static func redirect(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.redirect, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "resourceThumbnail", bundle: ..., traitCollection: ...)`
    static func resourceThumbnail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.resourceThumbnail, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "resourcesSide", bundle: ..., traitCollection: ...)`
    static func resourcesSide(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.resourcesSide, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "settingsSide", bundle: ..., traitCollection: ...)`
    static func settingsSide(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settingsSide, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "speakers", bundle: ..., traitCollection: ...)`
    static func speakers(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.speakers, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sponsors", bundle: ..., traitCollection: ...)`
    static func sponsors(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sponsors, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "time", bundle: ..., traitCollection: ...)`
    static func time(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.time, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "twitter", bundle: ..., traitCollection: ...)`
    static func twitter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.twitter, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "videos", bundle: ..., traitCollection: ...)`
    static func videos(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.videos, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "white_logo", bundle: ..., traitCollection: ...)`
    static func white_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.white_logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "www", bundle: ..., traitCollection: ...)`
    static func www(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.www, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"
            static let uiSceneStoryboardFile = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneStoryboardFile") ?? "Main"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 11 nibs.
  struct nib {
    /// Nib `BlogsCell`.
    static let blogsCell = _R.nib._BlogsCell()
    /// Nib `HomeSpeakersCell`.
    static let homeSpeakersCell = _R.nib._HomeSpeakersCell()
    /// Nib `HomeVideosCell`.
    static let homeVideosCell = _R.nib._HomeVideosCell()
    /// Nib `NotificationsCell`.
    static let notificationsCell = _R.nib._NotificationsCell()
    /// Nib `ProfileEventCell`.
    static let profileEventCell = _R.nib._ProfileEventCell()
    /// Nib `ProfileResourcesCell`.
    static let profileResourcesCell = _R.nib._ProfileResourcesCell()
    /// Nib `ResourcesCell`.
    static let resourcesCell = _R.nib._ResourcesCell()
    /// Nib `SpeakersCell`.
    static let speakersCell = _R.nib._SpeakersCell()
    /// Nib `SpeakersSessionsCell`.
    static let speakersSessionsCell = _R.nib._SpeakersSessionsCell()
    /// Nib `SponsorsCell`.
    static let sponsorsCell = _R.nib._SponsorsCell()
    /// Nib `UserProfileVC`.
    static let userProfileVC = _R.nib._UserProfileVC()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "BlogsCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.blogsCell) instead")
    static func blogsCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.blogsCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeSpeakersCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeSpeakersCell) instead")
    static func homeSpeakersCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeSpeakersCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeVideosCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeVideosCell) instead")
    static func homeVideosCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeVideosCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "NotificationsCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.notificationsCell) instead")
    static func notificationsCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.notificationsCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProfileEventCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.profileEventCell) instead")
    static func profileEventCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.profileEventCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProfileResourcesCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.profileResourcesCell) instead")
    static func profileResourcesCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.profileResourcesCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ResourcesCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.resourcesCell) instead")
    static func resourcesCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.resourcesCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SpeakersCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.speakersCell) instead")
    static func speakersCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.speakersCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SpeakersSessionsCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.speakersSessionsCell) instead")
    static func speakersSessionsCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.speakersSessionsCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SponsorsCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.sponsorsCell) instead")
    static func sponsorsCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.sponsorsCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "UserProfileVC", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.userProfileVC) instead")
    static func userProfileVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.userProfileVC)
    }
    #endif

    static func blogsCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BlogsCell? {
      return R.nib.blogsCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BlogsCell
    }

    static func homeSpeakersCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeSpeakersCell? {
      return R.nib.homeSpeakersCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeSpeakersCell
    }

    static func homeVideosCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeVideosCell? {
      return R.nib.homeVideosCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeVideosCell
    }

    static func notificationsCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NotificationsCell? {
      return R.nib.notificationsCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NotificationsCell
    }

    static func profileEventCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProfileEventCell? {
      return R.nib.profileEventCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProfileEventCell
    }

    static func profileResourcesCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProfileResourcesCell? {
      return R.nib.profileResourcesCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProfileResourcesCell
    }

    static func resourcesCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ResourcesCell? {
      return R.nib.resourcesCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ResourcesCell
    }

    static func speakersCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SpeakersCell? {
      return R.nib.speakersCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SpeakersCell
    }

    static func speakersSessionsCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SpeakersSessionsCell? {
      return R.nib.speakersSessionsCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SpeakersSessionsCell
    }

    static func sponsorsCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SponsorsCell? {
      return R.nib.sponsorsCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SponsorsCell
    }

    static func userProfileVC(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.userProfileVC.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 10 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `BlogsCell`.
    static let blogsCell: Rswift.ReuseIdentifier<BlogsCell> = Rswift.ReuseIdentifier(identifier: "BlogsCell")
    /// Reuse identifier `HomeSpeakersCell`.
    static let homeSpeakersCell: Rswift.ReuseIdentifier<HomeSpeakersCell> = Rswift.ReuseIdentifier(identifier: "HomeSpeakersCell")
    /// Reuse identifier `HomeVideosCell`.
    static let homeVideosCell: Rswift.ReuseIdentifier<HomeVideosCell> = Rswift.ReuseIdentifier(identifier: "HomeVideosCell")
    /// Reuse identifier `NotificationsCell`.
    static let notificationsCell: Rswift.ReuseIdentifier<NotificationsCell> = Rswift.ReuseIdentifier(identifier: "NotificationsCell")
    /// Reuse identifier `ProfileEventCell`.
    static let profileEventCell: Rswift.ReuseIdentifier<ProfileEventCell> = Rswift.ReuseIdentifier(identifier: "ProfileEventCell")
    /// Reuse identifier `ProfileResourcesCell`.
    static let profileResourcesCell: Rswift.ReuseIdentifier<ProfileResourcesCell> = Rswift.ReuseIdentifier(identifier: "ProfileResourcesCell")
    /// Reuse identifier `ResourcesCell`.
    static let resourcesCell: Rswift.ReuseIdentifier<ResourcesCell> = Rswift.ReuseIdentifier(identifier: "ResourcesCell")
    /// Reuse identifier `SpeakersCell`.
    static let speakersCell: Rswift.ReuseIdentifier<SpeakersCell> = Rswift.ReuseIdentifier(identifier: "SpeakersCell")
    /// Reuse identifier `SpeakersSessionsCell`.
    static let speakersSessionsCell: Rswift.ReuseIdentifier<SpeakersSessionsCell> = Rswift.ReuseIdentifier(identifier: "SpeakersSessionsCell")
    /// Reuse identifier `SponsorsCell`.
    static let sponsorsCell: Rswift.ReuseIdentifier<SponsorsCell> = Rswift.ReuseIdentifier(identifier: "SponsorsCell")

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _BlogsCell.validate()
      try _HomeSpeakersCell.validate()
      try _HomeVideosCell.validate()
      try _NotificationsCell.validate()
      try _ProfileResourcesCell.validate()
      try _ResourcesCell.validate()
      try _SpeakersCell.validate()
      try _SpeakersSessionsCell.validate()
      try _SponsorsCell.validate()
    }

    struct _BlogsCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = BlogsCell

      let bundle = R.hostingBundle
      let identifier = "BlogsCell"
      let name = "BlogsCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BlogsCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BlogsCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Angela Needle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Angela Needle' is used in nib 'BlogsCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "time", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'time' is used in nib 'BlogsCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "DarkGreen", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DarkGreen' is used in nib 'BlogsCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _HomeSpeakersCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = HomeSpeakersCell

      let bundle = R.hostingBundle
      let identifier = "HomeSpeakersCell"
      let name = "HomeSpeakersCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeSpeakersCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeSpeakersCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Angela Needle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Angela Needle' is used in nib 'HomeSpeakersCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Arrow' is used in nib 'HomeSpeakersCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _HomeVideosCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = HomeVideosCell

      let bundle = R.hostingBundle
      let identifier = "HomeVideosCell"
      let name = "HomeVideosCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeVideosCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeVideosCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "image 7", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'image 7' is used in nib 'HomeVideosCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _NotificationsCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = NotificationsCell

      let bundle = R.hostingBundle
      let identifier = "NotificationsCell"
      let name = "NotificationsCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NotificationsCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NotificationsCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Angela Needle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Angela Needle' is used in nib 'NotificationsCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Arrow' is used in nib 'NotificationsCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _ProfileEventCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ProfileEventCell

      let bundle = R.hostingBundle
      let identifier = "ProfileEventCell"
      let name = "ProfileEventCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProfileEventCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProfileEventCell
      }

      fileprivate init() {}
    }

    struct _ProfileResourcesCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ProfileResourcesCell

      let bundle = R.hostingBundle
      let identifier = "ProfileResourcesCell"
      let name = "ProfileResourcesCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProfileResourcesCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProfileResourcesCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "resourceThumbnail", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'resourceThumbnail' is used in nib 'ProfileResourcesCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _ResourcesCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ResourcesCell

      let bundle = R.hostingBundle
      let identifier = "ResourcesCell"
      let name = "ResourcesCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ResourcesCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ResourcesCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Arrow' is used in nib 'ResourcesCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "resourceThumbnail", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'resourceThumbnail' is used in nib 'ResourcesCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _SpeakersCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = SpeakersCell

      let bundle = R.hostingBundle
      let identifier = "SpeakersCell"
      let name = "SpeakersCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SpeakersCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SpeakersCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Angela Needle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Angela Needle' is used in nib 'SpeakersCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Arrow' is used in nib 'SpeakersCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _SpeakersSessionsCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = SpeakersSessionsCell

      let bundle = R.hostingBundle
      let identifier = "SpeakersSessionsCell"
      let name = "SpeakersSessionsCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SpeakersSessionsCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SpeakersSessionsCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Arrow' is used in nib 'SpeakersSessionsCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "LightGreen", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LightGreen' is used in nib 'SpeakersSessionsCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _SponsorsCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = SponsorsCell

      let bundle = R.hostingBundle
      let identifier = "SponsorsCell"
      let name = "SponsorsCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SponsorsCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SponsorsCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Bosch", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Bosch' is used in nib 'SponsorsCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "linkweb", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'linkweb' is used in nib 'SponsorsCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "redirect", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'redirect' is used in nib 'SponsorsCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _UserProfileVC: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "UserProfileVC"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try other.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try speakers.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try user.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let contentViewController = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "contentViewController")
      let forgotPasswordVC = StoryboardViewControllerResource<ForgotPasswordVC>(identifier: "ForgotPasswordVC")
      let homeVC = StoryboardViewControllerResource<HomeVC>(identifier: "HomeVC")
      let leftMenuViewController = StoryboardViewControllerResource<SideMenuVC>(identifier: "leftMenuViewController")
      let loginOptionsVC = StoryboardViewControllerResource<LoginOptionsVC>(identifier: "LoginOptionsVC")
      let loginOtpVC = StoryboardViewControllerResource<LoginOtpVC>(identifier: "LoginOtpVC")
      let loginSuccessVC = StoryboardViewControllerResource<LoginSuccessVC>(identifier: "LoginSuccessVC")
      let loginVC = StoryboardViewControllerResource<LoginVC>(identifier: "LoginVC")
      let name = "Main"
      let registerVC = StoryboardViewControllerResource<RegisterVC>(identifier: "RegisterVC")
      let resetPasswordVC = StoryboardViewControllerResource<ResetPasswordVC>(identifier: "ResetPasswordVC")
      let rootController = StoryboardViewControllerResource<SideMenuRootVC>(identifier: "rootController")

      func contentViewController(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: contentViewController)
      }

      func forgotPasswordVC(_: Void = ()) -> ForgotPasswordVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: forgotPasswordVC)
      }

      func homeVC(_: Void = ()) -> HomeVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeVC)
      }

      func leftMenuViewController(_: Void = ()) -> SideMenuVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: leftMenuViewController)
      }

      func loginOptionsVC(_: Void = ()) -> LoginOptionsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginOptionsVC)
      }

      func loginOtpVC(_: Void = ()) -> LoginOtpVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginOtpVC)
      }

      func loginSuccessVC(_: Void = ()) -> LoginSuccessVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginSuccessVC)
      }

      func loginVC(_: Void = ()) -> LoginVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginVC)
      }

      func registerVC(_: Void = ()) -> RegisterVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: registerVC)
      }

      func resetPasswordVC(_: Void = ()) -> ResetPasswordVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: resetPasswordVC)
      }

      func rootController(_: Void = ()) -> SideMenuRootVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: rootController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "FB login", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'FB login' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Google login", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Google login' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "GreenBG", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'GreenBG' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "agenda", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'agenda' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "blogs", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'blogs' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "cancel", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'cancel' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "drawer", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'drawer' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "eventsSide", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'eventsSide' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "maps", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'maps' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "notification", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'notification' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "personSide", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'personSide' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "resourcesSide", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'resourcesSide' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "settingsSide", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'settingsSide' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "speakers", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'speakers' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "sponsors", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'sponsors' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "videos", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'videos' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "white_logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'white_logo' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "DarkGreen", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DarkGreen' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "LightGreen", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LightGreen' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "VCBackground", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'VCBackground' is used in storyboard 'Main', but couldn't be loaded.") }
        }
        if _R.storyboard.main().forgotPasswordVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'forgotPasswordVC' could not be loaded from storyboard 'Main' as 'ForgotPasswordVC'.") }
        if _R.storyboard.main().homeVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeVC' could not be loaded from storyboard 'Main' as 'HomeVC'.") }
        if _R.storyboard.main().loginOptionsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginOptionsVC' could not be loaded from storyboard 'Main' as 'LoginOptionsVC'.") }
        if _R.storyboard.main().loginOtpVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginOtpVC' could not be loaded from storyboard 'Main' as 'LoginOtpVC'.") }
        if _R.storyboard.main().loginSuccessVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginSuccessVC' could not be loaded from storyboard 'Main' as 'LoginSuccessVC'.") }
        if _R.storyboard.main().loginVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginVC' could not be loaded from storyboard 'Main' as 'LoginVC'.") }
        if _R.storyboard.main().registerVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'registerVC' could not be loaded from storyboard 'Main' as 'RegisterVC'.") }
        if _R.storyboard.main().resetPasswordVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'resetPasswordVC' could not be loaded from storyboard 'Main' as 'ResetPasswordVC'.") }
        if _R.storyboard.main().contentViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'contentViewController' could not be loaded from storyboard 'Main' as 'UIKit.UINavigationController'.") }
        if _R.storyboard.main().leftMenuViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'leftMenuViewController' could not be loaded from storyboard 'Main' as 'SideMenuVC'.") }
        if _R.storyboard.main().rootController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'rootController' could not be loaded from storyboard 'Main' as 'SideMenuRootVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct other: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Other"
      let notificationsVC = StoryboardViewControllerResource<NotificationsVC>(identifier: "NotificationsVC")
      let resourcesVC = StoryboardViewControllerResource<ResourcesVC>(identifier: "ResourcesVC")
      let sponsorsVC = StoryboardViewControllerResource<SponsorsVC>(identifier: "SponsorsVC")

      func notificationsVC(_: Void = ()) -> NotificationsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: notificationsVC)
      }

      func resourcesVC(_: Void = ()) -> ResourcesVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: resourcesVC)
      }

      func sponsorsVC(_: Void = ()) -> SponsorsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: sponsorsVC)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "VCBackground", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'VCBackground' is used in storyboard 'Other', but couldn't be loaded.") }
        }
        if _R.storyboard.other().notificationsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'notificationsVC' could not be loaded from storyboard 'Other' as 'NotificationsVC'.") }
        if _R.storyboard.other().resourcesVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'resourcesVC' could not be loaded from storyboard 'Other' as 'ResourcesVC'.") }
        if _R.storyboard.other().sponsorsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'sponsorsVC' could not be loaded from storyboard 'Other' as 'SponsorsVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct speakers: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Speakers"
      let speakerDetailsVC = StoryboardViewControllerResource<SpeakerDetailsVC>(identifier: "SpeakerDetailsVC")
      let speakersVC = StoryboardViewControllerResource<SpeakersVC>(identifier: "SpeakersVC")

      func speakerDetailsVC(_: Void = ()) -> SpeakerDetailsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: speakerDetailsVC)
      }

      func speakersVC(_: Void = ()) -> SpeakersVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: speakersVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Angela Needle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Angela Needle' is used in storyboard 'Speakers', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ArrowWhite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ArrowWhite' is used in storyboard 'Speakers', but couldn't be loaded.") }
        if UIKit.UIImage(named: "facebook", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'facebook' is used in storyboard 'Speakers', but couldn't be loaded.") }
        if UIKit.UIImage(named: "linkedin", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'linkedin' is used in storyboard 'Speakers', but couldn't be loaded.") }
        if UIKit.UIImage(named: "twitter", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'twitter' is used in storyboard 'Speakers', but couldn't be loaded.") }
        if UIKit.UIImage(named: "www", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'www' is used in storyboard 'Speakers', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "LightGreen", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LightGreen' is used in storyboard 'Speakers', but couldn't be loaded.") }
          if UIKit.UIColor(named: "VCBackground", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'VCBackground' is used in storyboard 'Speakers', but couldn't be loaded.") }
        }
        if _R.storyboard.speakers().speakerDetailsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'speakerDetailsVC' could not be loaded from storyboard 'Speakers' as 'SpeakerDetailsVC'.") }
        if _R.storyboard.speakers().speakersVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'speakersVC' could not be loaded from storyboard 'Speakers' as 'SpeakersVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct user: Rswift.StoryboardResourceType, Rswift.Validatable {
      let blogsVC = StoryboardViewControllerResource<BlogsVC>(identifier: "BlogsVC")
      let bundle = R.hostingBundle
      let name = "User"
      let userProfileVC = StoryboardViewControllerResource<UserProfileVC>(identifier: "UserProfileVC")

      func blogsVC(_: Void = ()) -> BlogsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: blogsVC)
      }

      func userProfileVC(_: Void = ()) -> UserProfileVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userProfileVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Angela Needle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Angela Needle' is used in storyboard 'User', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Filter", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Filter' is used in storyboard 'User', but couldn't be loaded.") }
        if UIKit.UIImage(named: "drawer", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'drawer' is used in storyboard 'User', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "DarkGreen", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DarkGreen' is used in storyboard 'User', but couldn't be loaded.") }
          if UIKit.UIColor(named: "LightGreen", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LightGreen' is used in storyboard 'User', but couldn't be loaded.") }
          if UIKit.UIColor(named: "VCBackground", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'VCBackground' is used in storyboard 'User', but couldn't be loaded.") }
        }
        if _R.storyboard.user().blogsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'blogsVC' could not be loaded from storyboard 'User' as 'BlogsVC'.") }
        if _R.storyboard.user().userProfileVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userProfileVC' could not be loaded from storyboard 'User' as 'UserProfileVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
